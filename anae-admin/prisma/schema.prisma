// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// model Store {
//   id            String      @id @default(uuid())
//   name          String
//   userId        String
//   billboards    Billboard[] @relation("StoreToBillboard")
//   categories    Category[]  @relation("StoreToCategory")
//   sizes         Size[]      @relation("StoreToSize")
//   colors        Color[]     @relation("StoreToColor")
//   products      Product[]   @relation("StoreToProduct")
//   orders        Order[]     @relation("StoreToOrder")
//   createdAt     DateTime    @default(now())
//   updatedAt     DateTime    @updatedAt
// }

model Store {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  userId            String
  billboards        Billboard[]   @relation("StoreToBillboard")
  categories        Category[]    @relation("StoreToCategory")
  sizes             Size[]        @relation("StoreToSize")
  colors            Color[]       @relation("StoreToColor")
  products          Product[]     @relation("StoreToProduct")
  orders            Order[]       @relation("StoreToOrder")

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

// model Billboard {
//   id            String      @id @default(uuid())
//   storeId       String
//   store         Store       @relation("StoreToBillboard", fields: [storeId], references: [id])
//   label         String
//   imageUrl      String
//   categories    Category[]
//   createdAt     DateTime    @default(now())
//   updatedAt     DateTime    @updatedAt

//   @@index([storeId])
// }

model Billboard {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  storeId           String        @db.ObjectId
  store             Store         @relation("StoreToBillboard", fields:[storeId], references: [id]) 
  label             String
  imageUrl          String
  categories        Category[]

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

// model Category {
//   id            String      @id @default(uuid())
//   storeId       String
//   store         Store       @relation("StoreToCategory", fields: [storeId], references: [id])
//   billboardId   String
//   billboard     Billboard   @relation(fields: [billboardId], references: [id])
//   products      Product[]   @relation("CategoryToProduct")
//   name          String
//   createdAt     DateTime    @default(now())
//   updatedAt     DateTime    @updatedAt

//   @@index([storeId])
//   @@index([billboardId])
// }

model Category {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  storeId           String        @db.ObjectId
  store             Store         @relation("StoreToCategory", fields:[storeId], references:[id]) 
  billboardId       String        @db.ObjectId
  billboard         Billboard     @relation(fields: [billboardId], references: [id])
  products          Product[]     @relation("CategoryToProduct")
  name              String
  // productCount      Int           @default(0)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

// model Size {
//   id            String      @id @default(uuid())
//   storeId       String
//   store         Store       @relation("StoreToSize", fields: [storeId], references: [id])
//   name          String
//   value         String
//   products      Product[]
//   createdAt     DateTime    @default(now())
//   updatedAt     DateTime    @updatedAt

//   @@index([storeId])
// }

model Size {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  storeId           String        @db.ObjectId
  store             Store         @relation("StoreToSize", fields: [storeId], references: [id])
  name              String
  value             String  
  productIds        String[]      @db.ObjectId
  products          Product[]     @relation(fields: [productIds], references: [id])
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

// model Color {
//   id            String      @id @default(uuid())
//   storeId       String
//   store         Store       @relation("StoreToColor", fields: [storeId], references: [id])
//   name          String
//   value         String
//   products      Product[]
//   createdAt     DateTime    @default(now())
//   updatedAt     DateTime    @updatedAt

//   @@index([storeId])
// }

model Color {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  storeId           String        @db.ObjectId
  store             Store         @relation("StoreToColor", fields: [storeId], references: [id])
  name              String
  value             String
  products          Product[]
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

// model Product {
//   id            String      @id @default(uuid())
//   storeId       String
//   store         Store       @relation("StoreToProduct", fields: [storeId], references: [id])
//   categoryId    String
//   category      Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
//   name          String
//   description   String
//   composition   String
//   price         Decimal
//   isFeatured    Boolean     @default(false)
//   isArchived    Boolean     @default(false)
//   quantity      Int         @default(1)
//   sizeId        String
//   size          Size        @relation(fields: [sizeId], references: [id])
//   colorId       String
//   color         Color       @relation(fields: [colorId], references: [id])
//   images        Image[]
//   orderItems    OrderItem[]
//   createdAt     DateTime    @default(now())
//   updatedAt     DateTime    @updatedAt
  
//   @@index([storeId])
//   @@index([categoryId])
//   @@index([sizeId])
//   @@index([colorId])
// }

model Product {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  storeId           String        @db.ObjectId
  store             Store         @relation("StoreToProduct", fields:[storeId], references:[id])
  categoryId        String        @db.ObjectId
  category          Category      @relation("CategoryToProduct", fields:[categoryId], references:[id])
  name              String
  description       String
  composition       String
  price             Float
  salePrice         Float
  onSale            Boolean
  isFeatured        Boolean       @default(false)
  isArchived        Boolean       @default(false)
  isNew             Boolean       @default(true)
  // quantity          Int
  sizeIds           String[]      @db.ObjectId
  sizes             Size []       @relation(fields: [sizeIds], references: [id])
  colorId           String        @db.ObjectId
  color             Color         @relation(fields: [colorId], references: [id])
  images            Image[]
  orderItems        OrderItem[]
  // reviews           Review[]      @relation("ProductToReview") 
  // reference         String
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt 
}

// model Image {
//   id            String      @id @default(uuid())
//   productId     String
//   product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
//   url           String
//   createdAt     DateTime    @default(now())
//   updatedAt     DateTime    @updatedAt

//   @@index([productId])
// }

model Image {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  productId         String        @db.ObjectId
  product           Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  url               String
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

// model Order {
//   id            String      @id @default(uuid())
//   storeId       String
//   store         Store       @relation("StoreToOrder", fields: [storeId], references: [id])
//   orderItems    OrderItem[]
//   isPaid        Boolean     @default(false)
//   phone         String      @default("")
//   address       String      @default("")
//   createdAt     DateTime    @default(now())
//   updatedAt     DateTime    @updatedAt

//   @@index([storeId])
// }

model Order {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  storeId           String        @db.ObjectId 
  store             Store         @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems        OrderItem[]
  isPaid            Boolean       @default(false)
  phone             String        @default("")
  orderNumber       String
  address           String        @default("")
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

// model OrderItem {
//   id            String      @id @default(uuid())
//   orderId       String
//   order         Order       @relation(fields: [orderId], references: [id])
//   productId     String
//   product       Product     @relation(fields: [productId], references: [id])
//   orderQuantity Int

//   @@index([orderId])
//   @@index([productId])
// }

model OrderItem {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  orderId           String        @db.ObjectId
  order             Order         @relation(fields: [orderId], references: [id])
  productId         String        @db.ObjectId
  product           Product       @relation(fields: [productId], references: [id])
}